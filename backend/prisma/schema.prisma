// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String?
  password      String?
  provider      String?   // "email", "google", "apple"
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Profile & Preferences
  income        Float?
  taxStatus     String?   // "single", "married", etc
  riskProfile   String?   // From investment quiz
  
  // Financial Accounts
  accounts      FinancialAccount[]
  goals         Goal[]
  transactions  Transaction[]
  budgets       Budget[]
  insights      Insight[]
  badges        Badge[]
}

model FinancialAccount {
  id            String    @id @default(uuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  name          String
  type          String    // "bank", "credit", "investment", "loan"
  balance       Float
  accountNumber String?
  provider      String    // "plaid", "yodlee", etc
  lastSync      DateTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  transactions  Transaction[]
}

model Transaction {
  id            String    @id @default(uuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  accountId     String
  account       FinancialAccount @relation(fields: [accountId], references: [id])
  amount        Float
  category      String
  description   String
  date          DateTime
  isDeductible  Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Budget {
  id            String    @id @default(uuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  category      String
  amount        Float
  period        String    // "monthly", "yearly"
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Goal {
  id            String    @id @default(uuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  name          String
  targetAmount  Float
  currentAmount Float     @default(0)
  deadline      DateTime?
  type          String    // "house", "car", "vacation", "retirement"
  status        String    // "active", "completed", "paused"
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Insight {
  id            String    @id @default(uuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  type          String    // "spending", "saving", "tax", "investment"
  content       String
  read          Boolean   @default(false)
  createdAt     DateTime  @default(now())
}

model Badge {
  id            String    @id @default(uuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  name          String
  description   String
  earnedAt      DateTime  @default(now())
}